%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.3 (Build 19D76) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1287 363
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1287 363
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
514.20001 335.89999 m
562.70001 335.89999 601.5 297.60001 601.5 248.39999 c
601.5 198.2 562.70001 158.7 514.20001 158.7 c
465.70001 158.7 426.89999 198.2 426.89999 248.39999 c
426.89999 297.60001 465.60001 335.89999 514.20001 335.89999 c
514.20001 335.89999 l
h
514.20001 174.2 m
552.70001 174.2 583.90002 206.3 583.90002 248.3 c
583.90002 289.20001 552.70001 320.20001 514.20001 320.20001 c
475.39999 320.20001 444.49976 289.20001 444.49976 248.3 c
444.39999 206.39999 475.39999 174.2 514.20001 174.2 c
514.20001 174.2 l
h
W
0 0 1287 363 rc
421.89999 340.89999 m
606.5 340.89999 l
606.5 153.7 l
421.89999 153.7 l
h
f
Q
q
634.5 283.89999 m
651.09998 283.89999 l
651.09998 266 l
651.09998 262.70001 650.90002 259.5 650.59998 256.20001 c
651.09998 256.20001 l
655.5 267.39999 671.09998 287.20001 700.09998 287.20001 c
730.29999 287.20001 741 269.89999 741 239.60001 c
741 161.39999 l
724.40002 161.39999 l
724.40002 235 l
724.40002 254.3 721.5 271.29999 697.79999 271.29999 c
676.90002 271.10001 658.5 256.89999 653.09998 236.7 c
651.70001 231.3 651 225.7 651.09998 220.10001 c
651.09998 161.3 l
634.5 161.3 l
634.5 283.89999 l
634.5 283.89999 l
h
W
0 0 1287 363 rc
629.5 292.20001 m
746 292.20001 l
746 156.3 l
629.5 156.3 l
h
f
Q
q
831 287.39999 m
864.90002 287.39999 882.20001 261.29999 882.20001 230.8 c
882.20001 227.89999 881.70001 222.3 881.70001 222.3 c
787.59998 222.3 l
788.29999 190.89999 809.79999 173.8 835.09998 173.8 c
857.5 173.8 872.40002 188.7 872.40002 188.7 c
880 176 l
867.40002 165.10001 851.29999 159.10001 834.59998 158.89999 c
798 158.89999 770.5 185.2 770.5 223 c
770.59998 263.29999 797.90002 287.39999 831 287.39999 c
831 287.39999 l
h
865.40002 235.5 m
864.40002 261.10001 848.79999 273 830.59998 273 c
810.09998 273 792.29999 260.10001 788.40002 235.5 c
865.40002 235.5 l
865.40002 235.5 l
h
W
0 0 1287 363 rc
765.5 292.39999 m
887.20001 292.39999 l
887.20001 153.89999 l
765.5 153.89999 l
h
f
Q
q
916.20001 193.5 m
916.20001 193.5 934 174.8 961.09998 174.8 c
979.79999 174.8 995.20001 186 995.20001 204.5 c
995.20001 247.60001 909.59998 236.60001 909.59998 289.79999 c
909.59998 314.39999 931.29999 335.89999 963 335.89999 c
992.70001 335.89999 1008.8 319.29999 1008.8 319.29999 c
1000.5 305.10001 l
1000.5 305.10001 985.40002 319.70001 963 319.70001 c
941.09998 319.70001 926.90002 305.29999 926.90002 290.20001 c
926.90002 249.5 1012.5 261.20001 1012.5 204.89999 c
1012.5 179.3 992.79999 158.60001 960.59998 158.60001 c
925.5 158.60001 906.20001 180.5 906.20001 180.5 c
916.20001 193.5 l
916.20001 193.5 l
h
W
0 0 1287 363 rc
901.20001 340.89999 m
1017.5 340.89999 l
1017.5 153.60001 l
901.20001 153.60001 l
h
f
Q
q
1044.7 333 m
1062 333 l
1062 312.29999 l
1044.7 312.29999 l
1044.7 333 l
1044.7 333 l
h
1045.4 283.89999 m
1062 283.89999 l
1062 161.5 l
1045.4 161.5 l
1045.4 283.89999 l
1045.4 283.89999 l
h
W
0 0 1287 363 rc
1039.7 338 m
1067 338 l
1067 156.5 l
1039.7 156.5 l
h
f
Q
q
1106.2 268.70001 m
1090.3 268.70001 l
1090.3 282.60001 l
1106.2 282.60001 l
1106.2 317.79999 l
1122.8 317.79999 l
1122.8 282.60001 l
1153.2 282.60001 l
1153.2 268.70001 l
1122.8 268.70001 l
1122.8 207.7 l
1122.8 178.89999 1141.1 175.3 1150.4 175.3 c
1152.3 175.3 1154.2 175.39999 1156 175.8 c
1156 160.89999 l
1153.7 160.5 1151.3 160.39999 1148.9 160.39999 c
1134.8 160.39999 1106.2 165 1106.2 206 c
1106.2 268.70001 l
1106.2 268.70001 l
h
W
0 0 1287 363 rc
1085.3 322.79999 m
1161 322.79999 l
1161 155.39999 l
1085.3 155.39999 l
h
f
Q
q
1235.3 287.39999 m
1269.2 287.39999 1286.5 261.29999 1286.5 230.8 c
1286.5 227.89999 1286 222.3 1286 222.3 c
1191.9 222.3 l
1192.6 190.89999 1214.1 173.8 1239.4 173.8 c
1261.8 173.8 1276.7 188.7 1276.7 188.7 c
1284.2 176 l
1271.6 165.10001 1255.5 159.10001 1238.9 158.89999 c
1202.3 158.89999 1174.8 185.2 1174.8 223 c
1174.8 263.29999 1202.1 287.39999 1235.3 287.39999 c
1235.3 287.39999 l
h
1269.7 235.5 m
1268.7 261.10001 1253.1 273 1234.9 273 c
1214.4 273 1196.6 260.10001 1192.7 235.5 c
1269.7 235.5 l
1269.7 235.5 l
h
W
0 0 1287 363 rc
1169.8 292.39999 m
1291.5 292.39999 l
1291.5 153.89999 l
1169.8 153.89999 l
h
f
Q
q
426.20001 66.400002 m
426.20001 42.299999 443.60001 23 468.10001 23 c
488.5 23 499.79999 35.799999 499.79999 35.799999 c
495.10001 41.599998 l
495.10001 41.599998 485 30.5 468.20001 30.5 c
448.5 30.5 434.60001 46.599998 434.60001 66.400002 c
434.60001 86 448.5 101 467.89999 101 c
483.5 101 493.10001 91.800003 493.10001 91.800003 c
497.5 97.800003 l
497.5 97.800003 487.5 108.5 467.70001 108.5 c
444.10001 108.7 426.20001 90.5 426.20001 66.400002 c
426.20001 66.400002 l
h
W
0 0 1287 363 rc
421.20001 113.50163 m
504.79999 113.50163 l
504.79999 18 l
421.20001 18 l
h
f
Q
q
514.5 38.5 m
514.5 25.5 523.20001 24 528.20001 24 c
529.70001 24 531.09998 24.200001 531.09998 24.200001 c
531.09998 31.4 l
531.09998 31.4 530.20001 31.299999 529.09998 31.299999 c
526 31.299999 522.5 32.5 522.5 40.299999 c
522.5 107.3 l
514.5 107.3 l
514.5 38.5 l
514.5 38.5 l
h
W
0 0 1287 363 rc
509.5 112.3 m
536.09998 112.3 l
536.09998 19 l
509.5 19 l
h
f
Q
q
539.90002 54.400002 m
539.90002 36.5 553.90002 23.1 571.20001 23.1 c
588.5 23.1 602.5 36.5 602.5 54.400002 c
602.5 72 588.5 85.100563 571.20001 85.100563 c
553.90002 85.199997 539.90002 72 539.90002 54.400002 c
539.90002 54.400002 l
h
548.09998 54.400002 m
548.09998 67.800003 558.5 77.800003 571.20001 77.800003 c
583.90002 77.800003 594.29999 67.800003 594.29999 54.400002 c
594.29999 40.599998 583.90002 30.299999 571.20001 30.299999 c
558.5 30.299999 548.09998 40.599998 548.09998 54.400002 c
548.09998 54.400002 l
h
W
0 0 1287 363 rc
534.90002 90.10112 m
607.5 90.10112 l
607.5 18.1 l
534.90002 18.1 l
h
f
Q
q
616.70001 46.099998 m
616.70001 30.700001 622.59998 23.1 636.5 23.1 c
649.59998 23.1 657.40002 32.299999 659.70001 38.099998 c
659.90002 38.099998 l
659.90002 38.099998 659.70001 36 659.70001 33.400002 c
659.70001 24.6 l
667.5 24.6 l
667.5 83.900002 l
659.5 83.900002 l
659.5 55.5 l
659.5 42.700001 651.09998 30.799999 637.59998 30.799999 c
626.20001 30.799999 624.79999 39 624.79999 48.400002 c
624.79999 84 l
616.79999 84 l
616.79999 46.099998 l
616.70001 46.099998 l
h
W
0 0 1287 363 rc
611.70001 89 m
672.5 89 l
672.5 18.1 l
611.70001 18.1 l
h
f
Q
q
682.90002 54.200001 m
682.90002 35.799999 692.79999 23.1 708.70001 23.1 c
724.20001 23.1 729.09998 35 729.09998 35 c
729.29999 35 l
729.29999 35 729.09998 33.299999 729.09998 30.799999 c
729.09998 24.6 l
736.90002 24.6 l
736.90002 107.4 l
728.90002 107.4 l
728.90002 78.5 l
728.90002 76 729.09998 74 729.09998 74 c
728.90002 74 l
728.90002 74 724 85.199997 709.59998 85.199997 c
694 85.199997 682.90002 72.900002 682.90002 54.200001 c
682.90002 54.200001 l
h
691.09998 54.200001 m
691.09998 69.199997 699.70001 78 710.20001 78 c
722.90002 78 729 66.199997 729 54.200001 c
729 37.400002 719.70001 30.299999 709.79999 30.299999 c
698.79999 30.299999 691.09998 39.599998 691.09998 54.200001 c
691.09998 54.200001 l
h
W
0 0 1287 363 rc
677.90002 112.4 m
741.90002 112.4 l
741.90002 18.1 l
677.90002 18.1 l
h
f
Q
q
96.699997 262.20001 m
36 273.10001 l
36.900002 277.70001 l
90.900002 268.10001 l
81.199997 322.10001 l
85.900002 322.89999 l
96.699997 262.20001 l
h
W
0 0 1287 363 rc
31 327.89999 m
101.7 327.89999 l
101.7 257.20001 l
31 257.20001 l
h
f
Q
q
179.89999 295.39999 m
142.3 349.39999 l
146.2 352.10001 l
179.8 303.70001 l
211.7 350.10001 l
215.5 347.39999 l
179.89999 295.39999 l
h
W
0 0 1287 363 rc
137.3 357.10001 m
220.5 357.10001 l
220.5 290.39999 l
137.3 290.39999 l
h
f
Q
q
177.3 56.799999 4.5 245.10001 rc
172.3 306.89999 m
186.8 306.89999 l
186.8 51.799999 l
172.3 51.799999 l
h
f
Q
q
57.5 176.60001 245.10001 4.5 rc
52.5 186.10001 m
307.60001 186.10001 l
307.60001 171.60001 l
52.5 171.60001 l
h
f
Q
q
91.599998 264.10001 m
94.900002 267.39999 l
268.20001 94.099998 l
264.79999 90.800003 l
91.599998 264.10001 l
h
W
0 0 1287 363 rc
86.599998 272.39999 m
273.20001 272.39999 l
273.20001 85.800003 l
86.599998 85.800003 l
h
f
Q
q
91.599998 94.099998 m
264.79999 267.39999 l
268.20001 264.10001 l
94.900002 90.800003 l
91.599998 94.099998 l
h
W
0 0 1287 363 rc
86.599998 272.39999 m
273.20001 272.39999 l
273.20001 85.800003 l
86.599998 85.800003 l
h
f
Q
q
13.7 141.60001 m
10.8 145.3 l
55.5 179.10001 l
10.8 212.89999 l
13.7 216.60001 l
63.299999 179.10001 l
13.7 141.60001 l
h
W
0 0 1287 363 rc
5.8000002 221.60001 m
68.300003 221.60001 l
68.300003 136.60001 l
5.8000002 136.60001 l
h
f
Q
q
85.900002 35.299999 m
81.199997 36.099998 l
90.900002 90.099998 l
36.900002 80.5 l
36 85.099998 l
96.699997 96 l
85.900002 35.299999 l
h
W
0 0 1287 363 rc
31 101 m
101.7 101 l
101.7 30.299999 l
31 30.299999 l
h
f
Q
q
213.60001 10.1 m
180 54.5 l
151.5 10.2 l
147.60001 12.8 l
179.7 62.700001 l
217.39999 12.9 l
213.60001 10.1 l
h
W
0 0 1287 363 rc
142.60001 67.699997 m
222.39999 67.699997 l
222.39999 5.0999999 l
142.60001 5.0999999 l
h
f
Q
q
273.79999 35.299999 m
263 96 l
323.70001 85.099998 l
322.89999 80.5 l
268.79999 90.099998 l
278.5 36.099998 l
273.79999 35.299999 l
h
W
0 0 1287 363 rc
258 101 m
328.70001 101 l
328.70001 30.299999 l
258 30.299999 l
h
f
Q
q
346.20001 146.8 m
296 179.10001 l
346.20001 211.39999 l
348.70001 207.39999 l
304.70001 179.10001 l
348.70001 150.8 l
346.20001 146.8 l
h
W
0 0 1287 363 rc
291 216.39999 m
353.70001 216.39999 l
353.70001 141.8 l
291 141.8 l
h
f
Q
q
263 262.20001 m
273.79999 322.89999 l
278.5 322.10001 l
268.79999 268.10001 l
322.89999 277.70001 l
323.70001 273.10001 l
263 262.20001 l
h
W
0 0 1287 363 rc
258 327.89999 m
328.70001 327.89999 l
328.70001 257.20001 l
258 257.20001 l
h
f
Q
q
179.39999 225.89999 m
179.39999 225.89999 l
205.5 225.89999 226.60001 204.8 226.60001 178.7 c
226.60001 178.7 l
226.60001 152.60001 205.5 131.5 179.39999 131.5 c
179.39999 131.5 l
153.3 131.5 132.2 152.60001 132.2 178.7 c
132.2 178.7 l
132.2 204.8 153.39999 225.89999 179.39999 225.89999 c
h
W
0 0 1287 363 rc
127.2 230.89999 m
231.60001 230.89999 l
231.60001 126.5 l
127.2 126.5 l
h
f
Q
q
92.900002 277.70001 m
92.900002 277.70001 l
99.199997 277.70001 104.2 272.60001 104.2 266.39999 c
104.2 266.39999 l
104.2 260.10001 99.099998 255.10001 92.900002 255.10001 c
92.900002 255.10001 l
86.599998 255.10001 81.599998 260.20001 81.599998 266.39999 c
81.599998 266.39999 l
81.5 272.60001 86.599998 277.70001 92.900002 277.70001 c
h
W
0 0 1287 363 rc
76.598557 282.70001 m
109.2 282.70001 l
109.2 250.10001 l
76.598557 250.10001 l
h
f
Q
q
265.29999 277.70001 m
265.29999 277.70001 l
271.60001 277.70001 276.60001 272.60001 276.60001 266.39999 c
276.60001 266.39999 l
276.60001 260.10001 271.5 255.10001 265.29999 255.10001 c
265.29999 255.10001 l
259 255.10001 254 260.20001 254 266.39999 c
254 266.39999 l
254 272.60001 259.10001 277.70001 265.29999 277.70001 c
h
W
0 0 1287 363 rc
249 282.70001 m
281.60001 282.70001 l
281.60001 250.10001 l
249 250.10001 l
h
f
Q
q
92.900002 105.2 m
92.900002 105.2 l
99.199997 105.2 104.2 100.1 104.2 93.900002 c
104.2 93.900002 l
104.2 87.599998 99.099998 82.599998 92.900002 82.599998 c
92.900002 82.599998 l
86.599998 82.599998 81.599998 87.699997 81.599998 93.900002 c
81.599998 93.900002 l
81.5 100.1 86.599998 105.2 92.900002 105.2 c
h
W
0 0 1287 363 rc
76.598557 110.2 m
109.2 110.2 l
109.2 77.599998 l
76.598557 77.599998 l
h
f
Q
q
265.29999 105.2 m
265.29999 105.2 l
271.60001 105.2 276.60001 100.1 276.60001 93.900002 c
276.60001 93.900002 l
276.60001 87.599998 271.5 82.599998 265.29999 82.599998 c
265.29999 82.599998 l
259 82.599998 254 87.699997 254 93.900002 c
254 93.900002 l
254 100.1 259.10001 105.2 265.29999 105.2 c
h
W
0 0 1287 363 rc
249 110.2 m
281.60001 110.2 l
281.60001 77.599998 l
249 77.599998 l
h
f
Q
q
299.79999 191.39999 m
299.79999 191.39999 l
306.10001 191.39999 311.10001 186.3 311.10001 180.10001 c
311.10001 180.10001 l
311.10001 173.8 306 168.8 299.79999 168.8 c
299.79999 168.8 l
293.5 168.8 288.5 173.89999 288.5 180.10001 c
288.5 180.10001 l
288.5 186.3 293.60001 191.39999 299.79999 191.39999 c
h
W
0 0 1287 363 rc
283.5 196.39999 m
316.10001 196.39999 l
316.10001 163.8 l
283.5 163.8 l
h
f
Q
q
59.299999 191.39999 m
59.299999 191.39999 l
65.599998 191.39999 70.599998 186.3 70.599998 180.10001 c
70.599998 180.10001 l
70.599998 173.8 65.5 168.8 59.299999 168.8 c
59.299999 168.8 l
53 168.8 48 173.89999 48 180.10001 c
48 180.10001 l
47.900002 186.3 53 191.39999 59.299999 191.39999 c
h
W
0 0 1287 363 rc
42.998554 196.39999 m
75.599998 196.39999 l
75.599998 163.8 l
42.998554 163.8 l
h
f
Q
q
190.39999 59.299999 m
190.39999 59.299999 l
190.39999 53 185.3 48 179.10001 48 c
179.10001 48 l
172.8 48 167.8 53.099998 167.8 59.299999 c
167.8 59.299999 l
167.8 65.599998 172.89999 70.599998 179.10001 70.599998 c
179.10001 70.599998 l
185.39999 70.699997 190.39999 65.599998 190.39999 59.299999 c
h
W
0 0 1287 363 rc
162.8 75.601448 m
195.39999 75.601448 l
195.39999 43 l
162.8 43 l
h
f
Q
q
190.5 299.89999 m
190.5 299.89999 l
190.5 293.60001 185.39999 288.60001 179.2 288.60001 c
179.2 288.60001 l
172.89999 288.60001 167.89999 293.70001 167.89999 299.89999 c
167.89999 299.89999 l
167.89999 306.20001 173 311.20001 179.2 311.20001 c
179.2 311.20001 l
185.39999 311.29999 190.5 306.20001 190.5 299.89999 c
h
W
0 0 1287 363 rc
162.89999 316.20145 m
195.5 316.20145 l
195.5 283.60001 l
162.89999 283.60001 l
h
f
Q
q
224 349.79999 m
224 349.79999 l
224 343.5 218.89999 338.5 212.7 338.5 c
212.7 338.5 l
206.39999 338.5 201.39999 343.60001 201.39999 349.79999 c
201.39999 349.79999 l
201.39999 356.10001 206.5 361.10001 212.7 361.10001 c
212.7 361.10001 l
219 361.20001 224 356.10001 224 349.79999 c
h
W
0 0 1287 363 rc
196.39999 366.10144 m
229 366.10144 l
229 333.5 l
196.39999 333.5 l
h
f
Q
q
286.70001 323.5 m
286.70001 323.5 l
286.70001 317.20001 281.60001 312.20001 275.39999 312.20001 c
275.39999 312.20001 l
269.10001 312.20001 264.10001 317.29999 264.10001 323.5 c
264.10001 323.5 l
264.10001 329.79999 269.20001 334.79999 275.39999 334.79999 c
275.39999 334.79999 l
281.60001 334.79999 286.70001 329.79999 286.70001 323.5 c
h
W
0 0 1287 363 rc
259.10001 339.79999 m
291.70001 339.79999 l
291.70001 307.20001 l
259.10001 307.20001 l
h
f
Q
q
333.89999 276.29999 m
333.89999 276.29999 l
333.89999 270 328.79999 265 322.60001 265 c
322.60001 265 l
316.29999 265 311.29999 270.10001 311.29999 276.29999 c
311.29999 276.29999 l
311.29999 282.60001 316.39999 287.60001 322.60001 287.60001 c
322.60001 287.60001 l
328.79999 287.60001 333.89999 282.60001 333.89999 276.29999 c
h
W
0 0 1287 363 rc
306.29999 292.60001 m
338.89999 292.60001 l
338.89999 260 l
306.29999 260 l
h
f
Q
q
358.39999 210 m
358.39999 210 l
358.39999 203.7 353.29999 198.7 347.10001 198.7 c
347.10001 198.7 l
340.79999 198.7 335.79999 203.8 335.79999 210 c
335.79999 210 l
335.79999 216.3 340.89999 221.3 347.10001 221.3 c
347.10001 221.3 l
353.29999 221.39999 358.39999 216.3 358.39999 210 c
h
W
0 0 1287 363 rc
330.79999 226.30145 m
363.39999 226.30145 l
363.39999 193.7 l
330.79999 193.7 l
h
f
Q
q
358.39999 149.2 m
358.39999 149.2 l
358.39999 142.89999 353.29999 137.89999 347.10001 137.89999 c
347.10001 137.89999 l
340.79999 137.89999 335.79999 143 335.79999 149.2 c
335.79999 149.2 l
335.79999 155.5 340.89999 160.5 347.10001 160.5 c
347.10001 160.5 l
353.29999 160.5 358.39999 155.5 358.39999 149.2 c
h
W
0 0 1287 363 rc
330.79999 165.5 m
363.39999 165.5 l
363.39999 132.89999 l
330.79999 132.89999 l
h
f
Q
q
333.89999 83.800003 m
333.89999 83.800003 l
333.89999 77.5 328.79999 72.5 322.60001 72.5 c
322.60001 72.5 l
316.29999 72.5 311.29999 77.599998 311.29999 83.800003 c
311.29999 83.800003 l
311.29999 90.099998 316.39999 95.099998 322.60001 95.099998 c
322.60001 95.099998 l
328.79999 95.199997 333.89999 90.099998 333.89999 83.800003 c
h
W
0 0 1287 363 rc
306.29999 100.10145 m
338.89999 100.10145 l
338.89999 67.5 l
306.29999 67.5 l
h
f
Q
q
286.70001 36.599998 m
286.70001 36.599998 l
286.70001 30.299999 281.60001 25.299999 275.39999 25.299999 c
275.39999 25.299999 l
269.10001 25.299999 264.10001 30.4 264.10001 36.599998 c
264.10001 36.599998 l
264.10001 42.900002 269.20001 47.900002 275.39999 47.900002 c
275.39999 47.900002 l
281.60001 48 286.70001 42.900002 286.70001 36.599998 c
h
W
0 0 1287 363 rc
259.10001 52.901447 m
291.70001 52.901447 l
291.70001 20.299999 l
259.10001 20.299999 l
h
f
Q
q
226.8 12.1 m
226.8 12.1 l
226.8 5.8000002 221.7 0.80000001 215.5 0.80000001 c
215.5 0.80000001 l
209.2 0.80000001 204.2 5.9000001 204.2 12.1 c
204.2 12.1 l
204.2 18.4 209.3 23.4 215.5 23.4 c
215.5 23.4 l
221.7 23.5 226.8 18.4 226.8 12.1 c
h
W
0 0 1287 363 rc
199.2 28.401445 m
231.8 28.401445 l
231.8 -4.1999998 l
199.2 -4.1999998 l
h
f
Q
q
160.5 12.1 m
160.5 12.1 l
160.5 5.8000002 155.39999 0.80000001 149.2 0.80000001 c
149.2 0.80000001 l
142.89999 0.80000001 137.89999 5.9000001 137.89999 12.1 c
137.89999 12.1 l
137.89999 18.4 143 23.4 149.2 23.4 c
149.2 23.4 l
155.39999 23.5 160.5 18.4 160.5 12.1 c
h
W
0 0 1287 363 rc
132.89999 28.401445 m
165.5 28.401445 l
165.5 -4.1999998 l
132.89999 -4.1999998 l
h
f
Q
q
94.199997 36.599998 m
94.199997 36.599998 l
94.199997 30.299999 89.099998 25.299999 82.900002 25.299999 c
82.900002 25.299999 l
76.599998 25.299999 71.599998 30.4 71.599998 36.599998 c
71.599998 36.599998 l
71.599998 42.900002 76.699997 47.900002 82.900002 47.900002 c
82.900002 47.900002 l
89.099998 48 94.199997 42.900002 94.199997 36.599998 c
h
W
0 0 1287 363 rc
66.599998 52.901447 m
99.199997 52.901447 l
99.199997 20.299999 l
66.599998 20.299999 l
h
f
Q
q
47 83.800003 m
47 83.800003 l
47 77.5 41.900002 72.5 35.700001 72.5 c
35.700001 72.5 l
29.4 72.5 24.4 77.599998 24.4 83.800003 c
24.4 83.800003 l
24.4 90.099998 29.5 95.099998 35.700001 95.099998 c
35.700001 95.099998 l
41.900002 95.199997 47 90.099998 47 83.800003 c
h
W
0 0 1287 363 rc
19.4 100.10145 m
52 100.10145 l
52 67.5 l
19.4 67.5 l
h
f
Q
q
23.4 144.7 m
23.4 144.7 l
23.4 138.39999 18.299999 133.39999 12.1 133.39999 c
12.1 133.39999 l
5.8000002 133.39999 0.80000001 138.5 0.80000001 144.7 c
0.80000001 144.7 l
0.80000001 151 5.9000001 156 12.1 156 c
12.1 156 l
18.299999 156 23.4 150.89999 23.4 144.7 c
h
W
0 0 1287 363 rc
-4.1999998 161 m
28.4 161 l
28.4 128.39999 l
-4.1999998 128.39999 l
h
f
Q
q
23.4 215.5 m
23.4 215.5 l
23.4 209.2 18.299999 204.2 12.1 204.2 c
12.1 204.2 l
5.8000002 204.2 0.80000001 209.3 0.80000001 215.5 c
0.80000001 215.5 l
0.80000001 221.8 5.9000001 226.8 12.1 226.8 c
12.1 226.8 l
18.299999 226.8 23.4 221.7 23.4 215.5 c
h
W
0 0 1287 363 rc
-4.1999998 231.8 m
28.4 231.8 l
28.4 199.2 l
-4.1999998 199.2 l
h
f
Q
q
47 276.29999 m
47 276.29999 l
47 270 41.900002 265 35.700001 265 c
35.700001 265 l
29.4 265 24.4 270.10001 24.4 276.29999 c
24.4 276.29999 l
24.4 282.60001 29.5 287.60001 35.700001 287.60001 c
35.700001 287.60001 l
41.900002 287.70001 47 282.60001 47 276.29999 c
h
W
0 0 1287 363 rc
19.4 292.60144 m
52 292.60144 l
52 260 l
19.4 260 l
h
f
Q
q
94.199997 323.5 m
94.199997 323.5 l
94.199997 317.20001 89.099998 312.20001 82.900002 312.20001 c
82.900002 312.20001 l
76.599998 312.20001 71.599998 317.29999 71.599998 323.5 c
71.599998 323.5 l
71.599998 329.79999 76.699997 334.79999 82.900002 334.79999 c
82.900002 334.79999 l
89.099998 334.89999 94.199997 329.79999 94.199997 323.5 c
h
W
0 0 1287 363 rc
66.599998 339.80145 m
99.199997 339.80145 l
99.199997 307.20001 l
66.599998 307.20001 l
h
f
Q
q
155 351.70001 m
155 351.70001 l
155 345.39999 149.89999 340.39999 143.7 340.39999 c
143.7 340.39999 l
137.39999 340.39999 132.39999 345.5 132.39999 351.70001 c
132.39999 351.70001 l
132.39999 358 137.5 363 143.7 363 c
143.7 363 l
150 363 155 357.89999 155 351.70001 c
h
W
0 0 1287 363 rc
127.4 368 m
160 368 l
160 335.39999 l
127.4 335.39999 l
h
f
ep
end
%%Trailer
%%EOF
